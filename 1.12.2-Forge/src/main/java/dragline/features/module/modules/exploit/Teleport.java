/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package dragline.features.module.modules.exploit;

import dragline.event.*;
import dragline.utils.MinecraftInstance;
import dragline.api.enums.MaterialType;
import dragline.api.minecraft.block.state.IIBlockState;
import dragline.api.minecraft.client.entity.IEntityPlayerSP;
import dragline.api.minecraft.network.IPacket;
import dragline.api.minecraft.network.play.client.ICPacketEntityAction;
import dragline.api.minecraft.network.play.client.ICPacketPlayer;
import dragline.api.minecraft.renderer.entity.IRenderManager;
import dragline.api.minecraft.util.IMovingObjectPosition;
import dragline.api.minecraft.util.WBlockPos;
import dragline.api.minecraft.util.WVec3;
import dragline.event.*;
import dragline.features.module.Module;
import dragline.features.module.ModuleCategory;
import dragline.features.module.ModuleInfo;
import dragline.utils.ClientUtils;
import dragline.utils.MovementUtils;
import dragline.utils.PathUtils;
import dragline.utils.block.BlockUtils;
import dragline.utils.render.RenderUtils;
import dragline.utils.timer.TickTimer;
import dragline.value.BoolValue;
import dragline.value.ListValue;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;

import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.lwjgl.opengl.GL11.*;

@ModuleInfo(name = "Teleport", description = "Allows you to teleport around.", category = ModuleCategory.EXPLOIT)
public class Teleport extends Module {

    private final BoolValue ignoreNoCollision = new BoolValue("IgnoreNoCollision", true);
    private final ListValue modeValue = new ListValue("Mode", new String[] {"Blink", "Flag", "Rewinside", "OldRewinside", "Spoof", "Minesucht", "AAC3.5.0"}, "Blink");
    private final ListValue buttonValue = new ListValue("Button", new String[] {"Left", "Right", "Middle"}, "Middle");
    private final TickTimer flyTimer = new TickTimer();
    private boolean hadGround;
    private double fixedY;
    private final List<IPacket> packets = new ArrayList<>();
    private boolean disableLogger = false;
    private boolean zitter = false;
    private boolean doTeleport = false;
    private boolean freeze = false;
    private final TickTimer freezeTimer = new TickTimer();

    private int delay;
    private WBlockPos endPos;
    private IMovingObjectPosition objectPosition;

    @Override
    public void onEnable() {
        if (modeValue.get().equalsIgnoreCase("AAC3.5.0")) {
            ClientUtils.displayChatMessage("§c>>> §a§lTeleport §fAAC 3.5.0 §c<<<");
            ClientUtils.displayChatMessage("§cHow to teleport: §aPress " + buttonValue.get() + " mouse button.");
            ClientUtils.displayChatMessage("§cHow to cancel teleport: §aDisable teleport module.");
        }
    }

    @Override
    public void onDisable() {
        fixedY = 0D;
        delay = 0;
        MinecraftInstance.mc.getTimer().setTimerSpeed(1F);
        endPos = null;
        hadGround = false;
        freeze = false;
        disableLogger = false;
        flyTimer.reset();

        packets.clear();

        super.onDisable();
    }

    @EventTarget
    public void onUpdate(final UpdateEvent event) {
        final int buttonIndex = Arrays.asList(buttonValue.getValues()).indexOf(buttonValue.get());

        IEntityPlayerSP thePlayer = MinecraftInstance.mc.getThePlayer();

        if (thePlayer == null)
            return;

        if (modeValue.get().equals("AAC3.5.0")) {
            freezeTimer.update();

            if (freeze && freezeTimer.hasTimePassed(40)) {
                freezeTimer.reset();
                freeze = false;
                setState(false);
            }

            if (!flyTimer.hasTimePassed(60)) {
                flyTimer.update();

                if (thePlayer.getOnGround()) {
                    thePlayer.jump();
                } else {
                    MovementUtils.forward(zitter ? -0.21D : 0.21D);
                    zitter = !zitter;
                }

                hadGround = false;
                return;
            }

            if (thePlayer.getOnGround())
                hadGround = true;

            if (!hadGround)
                return;

            if (thePlayer.getOnGround())
                thePlayer.setPositionAndUpdate(thePlayer.getPosX(), thePlayer.getPosY() + 0.2D, thePlayer.getPosZ());

            final float vanillaSpeed = 2F;

            thePlayer.getCapabilities().setFlying(false);

            thePlayer.setMotionX(0.0);
            thePlayer.setMotionY(0.0);
            thePlayer.setMotionZ(0.0);

            if (MinecraftInstance.mc.getGameSettings().getKeyBindJump().isKeyDown())
                thePlayer.setMotionY(thePlayer.getMotionY() + vanillaSpeed);
            if (MinecraftInstance.mc.getGameSettings().getKeyBindSneak().isKeyDown())
                thePlayer.setMotionY(thePlayer.getMotionY() - vanillaSpeed);
            MovementUtils.strafe(vanillaSpeed);

            if (Mouse.isButtonDown(buttonIndex) && !doTeleport) {
                thePlayer.setPositionAndUpdate(thePlayer.getPosX(), thePlayer.getPosY() - 11, thePlayer.getPosZ());

                disableLogger = true;
                packets.forEach(packet -> MinecraftInstance.mc.getNetHandler().addToSendQueue(packet));

                freezeTimer.reset();
                freeze = true;
            }

            doTeleport = Mouse.isButtonDown(buttonIndex);
            return;
        }

        if (MinecraftInstance.mc.getCurrentScreen() == null && Mouse.isButtonDown(buttonIndex) && delay <= 0) {
            endPos = objectPosition.getBlockPos();


            IIBlockState state = BlockUtils.getState(endPos);

            if (state.getBlock().getMaterial(state).equals(MinecraftInstance.classProvider.getMaterialEnum(MaterialType.AIR))) {
                endPos = null;
                return;
            }

            ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3Position was set to §8" + endPos.getX() + "§3, §8" + ((BlockUtils.getBlock(objectPosition.getBlockPos()).getCollisionBoundingBox(MinecraftInstance.mc.getTheWorld(), objectPosition.getBlockPos(), BlockUtils.getBlock(objectPosition.getBlockPos()).getDefaultState()) == null ? endPos.getY() + 1 : BlockUtils.getBlock(objectPosition.getBlockPos()).getCollisionBoundingBox(MinecraftInstance.mc.getTheWorld(), objectPosition.getBlockPos(), BlockUtils.getBlock(objectPosition.getBlockPos()).getDefaultState()).getMaxY()) + fixedY) + "§3, §8" + endPos.getZ());
            delay = 6;
        }

        if(delay > 0)
            --delay;

        if(endPos != null) {
            final double endX = (double) endPos.getX() + 0.5D;
            final double endY = (BlockUtils.getBlock(objectPosition.getBlockPos())
                    .getCollisionBoundingBox(MinecraftInstance.mc.getTheWorld(), objectPosition.getBlockPos(), BlockUtils.getBlock(objectPosition.getBlockPos()).getDefaultState()) == null ? endPos.getY() + 1 : BlockUtils.getBlock(objectPosition.getBlockPos()).getCollisionBoundingBox(MinecraftInstance.mc.getTheWorld(), objectPosition.getBlockPos(), BlockUtils.getBlock(objectPosition.getBlockPos()).getDefaultState()).getMaxY()) + fixedY;
            final double endZ = (double) endPos.getZ() + 0.5D;

            switch(modeValue.get().toLowerCase()) {
                case "blink":
                    if (thePlayer.isSneaking()) {
                        // Sneak
                        MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.STOP_SNEAKING));

                        // Teleport
                        PathUtils.findBlinkPath(endX, endY, endZ).forEach(vector3d -> {
                            MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(vector3d.x, vector3d.y, vector3d.z, true));
                            thePlayer.setPosition(endX, endY, endZ);
                        });

                        // Sneak
                        MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.START_SNEAKING));

                        // Notify
                        ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
                    }
                    break;
                case "flag":
                    if (thePlayer.isSneaking()) {
                        // Sneak
                        MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.STOP_SNEAKING));

                        // Teleport
                        MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                        MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
                        MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                        MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY() + 5D, thePlayer.getPosZ(), true));
                        MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
                        MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX() + 0.5D, thePlayer.getPosY(), thePlayer.getPosZ() + 0.5D, true));

                        MovementUtils.forward(0.04D);

                        // Sneak
                        MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.START_SNEAKING));
                        // Notify
                        ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
                    }
                    break;
                case "rewinside":
                    thePlayer.setMotionY(0.1);
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY() + 0.6D, thePlayer.getPosZ(), true));

                    if ((int) thePlayer.getPosX() == (int) endX && (int) thePlayer.getPosY() == (int) endY && (int) thePlayer.getPosZ() == (int) endZ) {
                        ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
                        endPos = null;
                    } else
                        ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3Teleport try...");
                    break;
                case "oldrewinside":
                    thePlayer.setMotionY(0.1);

                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));

                    if ((int) thePlayer.getPosX() == (int) endX && (int) thePlayer.getPosY() == (int) endY && (int) thePlayer.getPosZ() == (int) endZ) {
                        ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
                        endPos = null;
                    } else
                        ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3Teleport try...");

                    MovementUtils.forward(0.04D);
                    break;
                case "minesucht":
                    if (!thePlayer.isSneaking())
                        break;

                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
                    ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
                    break;
            }
        }
    }

    @EventTarget
    public void onRender3D(final Render3DEvent event) {
        if (modeValue.get().equals("AAC3.5.0"))
            return;

        IEntityPlayerSP thePlayer = MinecraftInstance.mc.getThePlayer();

        if (thePlayer == null) {
            return;
        }


        WVec3 entityLookVec = thePlayer.getLookVec();

        final WVec3 lookVec = new WVec3(entityLookVec.getXCoord() * 300, entityLookVec.getYCoord() * 300, entityLookVec.getZCoord() * 300);
        final WVec3 posVec = new WVec3(thePlayer.getPosX(), thePlayer.getPosY() + 1.62, thePlayer.getPosZ());

        objectPosition = MinecraftInstance.mc.getTheWorld().rayTraceBlocks(posVec, posVec.add(lookVec), false, ignoreNoCollision.get(), false);

        if (objectPosition == null || objectPosition.getBlockPos() == null)
            return;

        final WBlockPos belowBlockPos = new WBlockPos(objectPosition.getBlockPos().getX(), objectPosition.getBlockPos().getY() - 1, objectPosition.getBlockPos().getZ());

        fixedY = MinecraftInstance.classProvider.isBlockFence(BlockUtils.getBlock(objectPosition.getBlockPos())) ? (MinecraftInstance.mc.getTheWorld().getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset(objectPosition.getBlockPos().getX() + 0.5D - thePlayer.getPosX(), objectPosition.getBlockPos().getY() + 1.5D - thePlayer.getPosY(), objectPosition.getBlockPos().getZ() + 0.5D - thePlayer.getPosZ())).isEmpty() ? 0.5D : 0D) : MinecraftInstance.classProvider.isBlockFence(BlockUtils.getBlock(belowBlockPos)) ? (!MinecraftInstance.mc.getTheWorld().getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset(objectPosition.getBlockPos().getX() + 0.5D - thePlayer.getPosX(), objectPosition.getBlockPos().getY() + 0.5D - thePlayer.getPosY(), objectPosition.getBlockPos().getZ() + 0.5D - thePlayer.getPosZ())).isEmpty() || BlockUtils.getBlock(objectPosition.getBlockPos()).getCollisionBoundingBox(MinecraftInstance.mc.getTheWorld(), objectPosition.getBlockPos(), BlockUtils.getBlock(objectPosition.getBlockPos()).getDefaultState()) == null ? 0D : 0.5D - 1) : MinecraftInstance.classProvider.isBlockSnow(BlockUtils.getBlock(objectPosition.getBlockPos())) ? 1 - 0.125D : 0D;

        final int x = objectPosition.getBlockPos().getX();
        final double y = (BlockUtils.getBlock(objectPosition.getBlockPos()).getCollisionBoundingBox(MinecraftInstance.mc.getTheWorld(), objectPosition.getBlockPos(), BlockUtils.getBlock(objectPosition.getBlockPos()).getDefaultState()) == null ? objectPosition.getBlockPos().getY() + 1 : BlockUtils.getBlock(objectPosition.getBlockPos()).getCollisionBoundingBox(MinecraftInstance.mc.getTheWorld(), objectPosition.getBlockPos(), BlockUtils.getBlock(objectPosition.getBlockPos()).getDefaultState()).getMaxY()) - 1D + fixedY;
        final int z = objectPosition.getBlockPos().getZ();

        if (!MinecraftInstance.classProvider.isBlockAir(BlockUtils.getBlock(objectPosition.getBlockPos()))) {
            final IRenderManager renderManager = MinecraftInstance.mc.getRenderManager();

            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
            glEnable(GL_BLEND);
            glLineWidth(2F);
            glDisable(GL_TEXTURE_2D);
            glDisable(GL_DEPTH_TEST);
            glDepthMask(false);
            RenderUtils.glColor(modeValue.get().equalsIgnoreCase("minesucht") && thePlayer.getPosition().getY() != y + 1 ? new Color(255, 0, 0, 90) : !MinecraftInstance.mc.getTheWorld().getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset(x + 0.5D - thePlayer.getPosX(), y + 1D - thePlayer.getPosY(), z + 0.5D - thePlayer.getPosZ())).isEmpty() ? new Color(255, 0, 0, 90) : new Color(0, 255, 0, 90));
            RenderUtils.drawFilledBox(MinecraftInstance.classProvider.createAxisAlignedBB(x - renderManager.getRenderPosX(), (y + 1) - renderManager.getRenderPosY(), z - renderManager.getRenderPosZ(), x - renderManager.getRenderPosX() + 1.0D, y + 1.2D - renderManager.getRenderPosY(), z - renderManager.getRenderPosZ() + 1.0D));
            glEnable(GL_TEXTURE_2D);
            glEnable(GL_DEPTH_TEST);
            glDepthMask(true);
            glDisable(GL_BLEND);

            RenderUtils.renderNameTag(Math.round(thePlayer.getDistance(x + 0.5D, y + 1D, z + 0.5D)) + "m", x + 0.5, y + 1.7, z + 0.5);
            GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
        }
    }

    @EventTarget
    public void onMove(final MoveEvent event) {
        if (modeValue.get().equalsIgnoreCase("aac3.5.0") && freeze) {
            event.zeroXZ();
        }
    }

    @EventTarget
    public void onPacket(final PacketEvent event) {
        final IPacket packet = event.getPacket();

        if (disableLogger)
            return;

        if (MinecraftInstance.classProvider.isCPacketPlayer(packet)) {
            final ICPacketPlayer packetPlayer = packet.asCPacketPlayer();

            switch (modeValue.get().toLowerCase()) {
                case "spoof":
                    if (endPos == null)
                        break;

                    packetPlayer.setX(endPos.getX() + 0.5D);
                    packetPlayer.setY(endPos.getY() + 1);
                    packetPlayer.setZ(endPos.getZ() + 0.5D);

                    MinecraftInstance.mc.getThePlayer().setPosition(endPos.getX() + 0.5D, endPos.getY() + 1, endPos.getZ() + 0.5D);
                    break;
                case "aac3.5.0":
                    if (!flyTimer.hasTimePassed(60))
                        return;

                    event.cancelEvent();

                    if (!(MinecraftInstance.classProvider.isCPacketPlayerPosition(packet)) && !(MinecraftInstance.classProvider.isCPacketPlayerPosLook(packet)))
                        return;

                    packets.add(packet);
                    break;
            }
        }
    }

    @Override
    public String getTag() {
        return modeValue.get();
    }
}
