package dragline.features.module.modules.exploit

import dragline.api.minecraft.client.gui.inventory.IGuiContainer
import dragline.event.*
import dragline.features.module.Module
import dragline.features.module.ModuleCategory
import dragline.features.module.ModuleInfo
import net.ccbluex.liquidbounce.injection.backend.unwrap
import dragline.value.*
import net.minecraft.network.play.client.*
import net.minecraft.network.play.server.*
import org.lwjgl.input.Keyboard

@ModuleInfo(name = "KeepContainer", description = "保存一个打开过的容器以便下次远程打开它", category = ModuleCategory.EXPLOIT)
class KeepContainer : Module() {
    private val closeOnDisableValue = BoolValue("CloseOnDisable", true)
    private val cancelClickValue = BoolValue("CancelInvaildClick", true)
    private val key: TextValue = object : TextValue("Key", "J") {
        override fun onChanged(oldValue: String, newValue: String) {
            if (newValue == "" || newValue.toUpperCase() == "NONE" || newValue.toUpperCase() == "NULL") {
                set(oldValue)
                return
            }
            val a : Int = Keyboard.getKeyIndex(newValue.toUpperCase())
            if (a == 0)
                set(oldValue)
            else
                keyCode = a
        }
    }

    var container: IGuiContainer? = null
        private set
    private var keyCode : Int = Keyboard.KEY_J
    private var disableLogger = false

    override fun onDisable() {
        if (container != null && closeOnDisableValue.get()) {
            disableLogger = true
            try {
                mc.unwrap().connection!!.sendPacket(CPacketCloseWindow(container!!.inventorySlots!!.windowId))
            } finally {
                disableLogger = false
            }
            container = null
        }
    }

    @EventTarget
    fun onScreen(event: ScreenEvent) {
        val guiScreen = event.guiScreen

        if (classProvider.isGuiContainer(guiScreen) && !classProvider.isGuiInventory(guiScreen))
            container = guiScreen!!.asGuiContainer()
    }

    @EventTarget
    fun onKey(event: KeyEvent) {
        if (event.key == keyCode) {
            if (container == null)
                return

            mc.displayGuiScreen(container!!)
        }
    }

    @EventTarget
    fun onClickWindow(event: ClickWindowEvent) {
        if (cancelClickValue.get() && container != null && event.windowId != container!!.inventorySlots!!.windowId) {
            event.cancelEvent()
        }
    }

    // CPacket is sync
    @EventTarget
    fun onPacket(event: PacketEvent) {
        if (disableLogger) return
        if (event.packet.unwrap() is CPacketCloseWindow)
            event.cancelEvent()
    }

    // SPacket is not sync, use PacketProcessEvent
    @EventTarget
    fun onPacketProcess(event: PacketProcessEvent) {
        val pw = event.packet.unwrap()
        if (pw is SPacketCloseWindow) {
            if (container != null)
                container = null
        } else if (pw is SPacketOpenWindow) {
            if (container != null)
                container = null
        } else if (pw is SPacketSetSlot) {
            if (container != null && container!!.inventorySlots != null && pw.windowId == container!!.inventorySlots!!.windowId && pw.windowId != (mc.thePlayer?.openContainer?.windowId ?: 0)) {
                container!!.inventorySlots!!.unwrap().putStackInSlot(pw.slot, pw.stack)
            }
        } else if (pw is SPacketWindowItems) {
            if (container != null && container!!.inventorySlots != null && pw.windowId == container!!.inventorySlots!!.windowId && pw.windowId != (mc.thePlayer?.openContainer?.windowId ?: 0)) {
                container!!.inventorySlots!!.unwrap().setAll(pw.itemStacks)
            }
        } else if (pw is SPacketWindowProperty) {
            if (container != null && container!!.inventorySlots != null && pw.windowId == container!!.inventorySlots!!.windowId && pw.windowId != (mc.thePlayer?.openContainer?.windowId ?: 0)) {
                container!!.inventorySlots!!.unwrap().updateProgressBar(pw.property, pw.value)
            }
        }
    }
}