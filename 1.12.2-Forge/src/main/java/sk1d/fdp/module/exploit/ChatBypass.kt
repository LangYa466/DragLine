/*
 * FDPClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/SkidderMC/FDPClient/
 */
package sk1d.fdp.module.exploit

import dragline.event.EventTarget
import dragline.event.PacketEvent
import dragline.features.module.Module
import dragline.features.module.ModuleCategory
import dragline.features.module.ModuleInfo
import dragline.utils.misc.RandomUtils
import dragline.utils.misc.StringUtils
import dragline.value.FloatValue
import dragline.value.IntegerValue
import dragline.value.ListValue
import dragline.value.TextValue
import net.minecraft.network.play.client.CPacketChatMessage

@ModuleInfo(name = "ChatBypass", description = "Test",category = ModuleCategory.EXPLOIT)
class ChatBypass : Module() {

    private val modeValue = ListValue("Mode", arrayOf("Null", "RandomChar", "Unicode", "RandomUnicode", "ToPinyin"), "Null")
    private val chanceValue = FloatValue("Chance", 0.2F, 0F, 0.5F).displayable { !modeValue.equals("Unicode") }
    private val pinyinFillValue = TextValue("Pinyin-Fill", " ").displayable { modeValue.equals("ToPinyin") }
    private val minUnicodeValue: IntegerValue = object : IntegerValue("MinUnicode", 1000, 0, 100000) {
        override fun onChanged(oldValue: Int, newValue: Int) {
            if (newValue >= maxUnicodeValue.get()) {
                set(oldValue)
            }
        }
    }.displayable { modeValue.contains("RandomChar") } as IntegerValue
    private val maxUnicodeValue: IntegerValue = object : IntegerValue("MaxUnicode", 20000, 0, 100000) {
        override fun onChanged(oldValue: Int, newValue: Int) {
            if (newValue <= minUnicodeValue.get()) {
                set(oldValue)
            }
        }
    }.displayable { modeValue.contains("RandomChar") } as IntegerValue

    @EventTarget
    fun onPacket(event: PacketEvent) {
        if (event.packet is CPacketChatMessage) {
            val packet = event.packet
            val message = packet.message
            if (message.startsWith("/")) return

            when (modeValue.get().toLowerCase()) {
                "topinyin" -> {
                    packet.message = StringUtils.toPinyin(packet.message, pinyinFillValue.get())
                }
                else -> {
                    val sb = StringBuilder()

                    for (char in message.toCharArray()) {
                        when (modeValue.get().toLowerCase()) {
                            "null" -> {
                                sb.append(char)
                                if (Math.random() < chanceValue.get()) {
                                    sb.append("\uF8FF")
                                }
                            }

                            "randomchar" -> {
                                sb.append(char)
                                if (Math.random() < chanceValue.get()) {
                                    sb.append((RandomUtils.nextInt(minUnicodeValue.get(), maxUnicodeValue.get())).toChar())
                                }
                            }

                            "unicode" -> {
                                if (char.hashCode() in 33..128) {
                                    sb.append(Character.toChars(char.hashCode() + 65248))
                                } else {
                                    sb.append(char)
                                }
                            }

                            "randomunicode" -> {
                                if ((Math.random() < chanceValue.get()) && (char.hashCode() in 33..128)) {
                                    sb.append(Character.toChars(char.hashCode() + 65248))
                                } else {
                                    sb.append(char)
                                }
                            }
                        }
                    }

                    packet.message = sb.toString()
                }
            }

            if (packet.message.length > 100) {
                packet.message = packet.message.substring(0, 100)
            }
        }
    }
    override val tag: String
        get() = modeValue.get()
}